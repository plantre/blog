(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{430:function(t,e,a){"use strict";a.r(e);var r=a(2),s=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[e("code",[t._v("int[] array = result.stream().mapToInt(Integer::intValue).toArray();")])]),t._v(" "),e("h1",{attrs:{id:"动态规划"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#动态规划"}},[t._v("#")]),t._v(" 动态规划")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/jian-sheng-zi-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("剑指 Offer 14- I. 剪绳子 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/trapping-rain-water/",target:"_blank",rel:"noopener noreferrer"}},[t._v("42. 接雨水 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/",target:"_blank",rel:"noopener noreferrer"}},[t._v("121. 买卖股票的最佳时机 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("(只能一次，最多两次，不限次数)")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/lemonade-change/",target:"_blank",rel:"noopener noreferrer"}},[t._v("860. 柠檬水找零 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("h1",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),e("h6",{attrs:{id:"排序数组-平方后-数组当中有多少不同的数字-相同算一个"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#排序数组-平方后-数组当中有多少不同的数字-相同算一个"}},[t._v("#")]),t._v(" 排序数组，平方后，数组当中有多少不同的数字（相同算一个）")]),t._v(" "),e("h6",{attrs:{id:"一个数据先递增再递减-找出数组不重复的个数-比如-1-3-9-1-结果为3-不能使用额外空间-复杂度o-n"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个数据先递增再递减-找出数组不重复的个数-比如-1-3-9-1-结果为3-不能使用额外空间-复杂度o-n"}},[t._v("#")]),t._v(" 一个数据先递增再递减，找出数组不重复的个数，比如 [1, 3, 9, 1]，结果为3，不能使用额外空间，复杂度o(n)")]),t._v(" "),e("h6",{attrs:{id:"递增数组-找出和为k的数对"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#递增数组-找出和为k的数对"}},[t._v("#")]),t._v(" 递增数组，找出和为k的数对")]),t._v(" "),e("h6",{attrs:{id:"给出一个数组nums-一个值k-找出数组中的两个下标-i-j-使得-nums-i-nums-j-k"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给出一个数组nums-一个值k-找出数组中的两个下标-i-j-使得-nums-i-nums-j-k"}},[t._v("#")]),t._v(" 给出一个数组nums，一个值k，找出数组中的两个下标 i，j 使得 nums[i] + nums[j] = k.")]),t._v(" "),e("h1",{attrs:{id:"滑动窗口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口"}},[t._v("#")]),t._v(" 滑动窗口")]),t._v(" "),e("p",[t._v("和为s的连续正整数序列（"),e("a",{attrs:{href:"https://www.nowcoder.com/jump/super-jump/word?word=%E5%89%91%E6%8C%87offer",target:"_blank",rel:"noopener noreferrer"}},[t._v("剑指offer"),e("OutboundLink")],1),t._v("57-II)")]),t._v(" "),e("h6",{attrs:{id:"某一个大文件被拆成了n个小文件-每个小文件编号从0至n-1-相应大小分别记为s-i-。给定磁盘空间为c-试实现一个函数从n个文件中连续选出若干个文件拷贝到磁盘中-使得磁盘剩余空间最小。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#某一个大文件被拆成了n个小文件-每个小文件编号从0至n-1-相应大小分别记为s-i-。给定磁盘空间为c-试实现一个函数从n个文件中连续选出若干个文件拷贝到磁盘中-使得磁盘剩余空间最小。"}},[t._v("#")]),t._v(" 某一个大文件被拆成了N个小文件，每个小文件编号从0至N-1，相应大小分别记为S(i)。给定磁盘空间为C，试实现一个函数从N个文件中连续选出若干个文件拷贝到磁盘中，使得磁盘剩余空间最小。")]),t._v(" "),e("h6",{attrs:{id:"给定m个不重复的字符-a-b-c-d-以及一个长度为n的字符串tbcacbdata-问能否在这个字符串中找到一个长度为m的连续子串-使得这个子串刚好由上面m个字符组成-顺序无所谓-返回任意满足条件的一个子串的起始位置-未找到返回-1。比如上面这个例子-acbd-3。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给定m个不重复的字符-a-b-c-d-以及一个长度为n的字符串tbcacbdata-问能否在这个字符串中找到一个长度为m的连续子串-使得这个子串刚好由上面m个字符组成-顺序无所谓-返回任意满足条件的一个子串的起始位置-未找到返回-1。比如上面这个例子-acbd-3。"}},[t._v("#")]),t._v(" 给定m个不重复的字符 [a, b, c, d]，以及一个长度为n的字符串tbcacbdata，问能否在这个字符串中找到一个长度为m的连续子串，使得这个子串刚好由上面m个字符组成，顺序无所谓，返回任意满足条件的一个子串的起始位置，未找到返回-1。比如上面这个例子，acbd，3。")]),t._v(" "),e("h6",{attrs:{id:"有序有重复数组-给定target确定范围"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有序有重复数组-给定target确定范围"}},[t._v("#")]),t._v(" 有序有重复数组，给定target确定范围")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/jump-game/",target:"_blank",rel:"noopener noreferrer"}},[t._v("55. 跳跃游戏 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/binary-tree-maximum-path-sum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("124. 二叉树中的最大路径和 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/longest-consecutive-sequence/",target:"_blank",rel:"noopener noreferrer"}},[t._v("128. 最长连续序列 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("求二叉树根节点到叶子结点的路径和的最小值")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/spiral-matrix-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("59. 螺旋矩阵 II - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/path-sum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("112. 路径总和 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/path-sum-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("113. 路径总和 II - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/merge-intervals/",target:"_blank",rel:"noopener noreferrer"}},[t._v("56. 合并区间 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"}},[t._v("151. 颠倒字符串中的单词 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/kth-largest-element-in-an-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("215. 数组中的第K个最大元素 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("236. 二叉树的最近公共祖先 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/search-a-2d-matrix-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("240. 搜索二维矩阵 II - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/rotate-image/",target:"_blank",rel:"noopener noreferrer"}},[t._v("48. 旋转图像 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/gas-station/",target:"_blank",rel:"noopener noreferrer"}},[t._v("134. 加油站 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("剑指 Offer 32 - I. 从上到下打印二叉树 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/sum-lists-lcci/",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试题 02.05. 链表求和 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("剑指 Offer 07. 重建二叉树 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode.cn/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("剑指 Offer 57 - II. 和为s的连续正数序列 - 力扣（LeetCode）"),e("OutboundLink")],1)]),t._v(" "),e("h1",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),e("h6",{attrs:{id:"ab两个排序数组-原地合并数组。-a当中穿插一些无效数字怎么处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ab两个排序数组-原地合并数组。-a当中穿插一些无效数字怎么处理"}},[t._v("#")]),t._v(" AB两个排序数组，原地合并数组。（A当中穿插一些无效数字怎么处理？）")]),t._v(" "),e("h6",{attrs:{id:"-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[t._v("#")])]),t._v(" "),e("h6",{attrs:{id:"高考成绩2000万数据-分数0-750-如何快速知道你的排名-如何知道任一分数排名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高考成绩2000万数据-分数0-750-如何快速知道你的排名-如何知道任一分数排名"}},[t._v("#")]),t._v(" 高考成绩2000万数据，分数0-750，如何快速知道你的排名，如何知道任一分数排名")]),t._v(" "),e("h6",{attrs:{id:"两个链表-可能相交-找出相交的节点-给出证明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#两个链表-可能相交-找出相交的节点-给出证明"}},[t._v("#")]),t._v(" 两个链表，可能相交，找出相交的节点，给出证明")]),t._v(" "),e("h6",{attrs:{id:"_10亿个数字-取最小的100个数-还是topk问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10亿个数字-取最小的100个数-还是topk问题"}},[t._v("#")]),t._v(" 10亿个数字，取最小的100个数（还是topk问题）")]),t._v(" "),e("h6",{attrs:{id:"_1亿个正整数-范围是0-42亿。求出现次数是2的数字-空间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1亿个正整数-范围是0-42亿。求出现次数是2的数字-空间复杂度"}},[t._v("#")]),t._v(" 1亿个正整数,范围是0-42亿。求出现次数是2的数字，空间复杂度")]),t._v(" "),e("h6",{attrs:{id:"蛇形遍历二叉树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#蛇形遍历二叉树"}},[t._v("#")]),t._v(" 蛇形遍历二叉树")]),t._v(" "),e("h6",{attrs:{id:"给定一个-0-4随机数生成器-如何生成0-6随机数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给定一个-0-4随机数生成器-如何生成0-6随机数"}},[t._v("#")]),t._v(" 给定一个 0-4随机数生成器 如何生成0-6随机数")]),t._v(" "),e("h6",{attrs:{id:"写代码-二叉树的最近公共祖先-leetcode-236-稍有不同-原题的2个节点-面试是多个节点-算法的时间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写代码-二叉树的最近公共祖先-leetcode-236-稍有不同-原题的2个节点-面试是多个节点-算法的时间复杂度"}},[t._v("#")]),t._v(" 写代码： 二叉树的最近公共祖先 leetcode 236 稍有不同，原题的2个节点，面试是多个节点，算法的时间复杂度")]),t._v(" "),e("h6",{attrs:{id:"算法-快排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法-快排"}},[t._v("#")]),t._v(" 算法：快排")]),t._v(" "),e("h6",{attrs:{id:"算法-二叉树的前序遍历非递归"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法-二叉树的前序遍历非递归"}},[t._v("#")]),t._v(" 算法：二叉树的前序遍历非递归")]),t._v(" "),e("h6",{attrs:{id:"算法-二叉树的后序遍历非递归"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法-二叉树的后序遍历非递归"}},[t._v("#")]),t._v(" 算法：二叉树的后序遍历非递归")]),t._v(" "),e("h6",{attrs:{id:"算法-有一个ip地址库-假设有几十万条ip-如何判断某个ip地址是否在这个库中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法-有一个ip地址库-假设有几十万条ip-如何判断某个ip地址是否在这个库中"}},[t._v("#")]),t._v(" 算法：有一个IP地址库，假设有几十万条ip，如何判断某个ip地址是否在这个库中？")]),t._v(" "),e("h6",{attrs:{id:"反转链表-反转链表升级版-每k个反转一下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反转链表-反转链表升级版-每k个反转一下"}},[t._v("#")]),t._v(" 反转链表 ----\x3e反转链表升级版（每k个反转一下）")]),t._v(" "),e("h6",{attrs:{id:"数据结构-讲解你了解的数据结构-提到heap-让手写heap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据结构-讲解你了解的数据结构-提到heap-让手写heap"}},[t._v("#")]),t._v(" 数据结构：（讲解你了解的数据结构）提到heap，让手写heap")]),t._v(" "),e("h6",{attrs:{id:"算法-中文数字转阿拉伯数字-字符串处理问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法-中文数字转阿拉伯数字-字符串处理问题"}},[t._v("#")]),t._v(" 算法：中文数字转阿拉伯数字，字符串处理问题")]),t._v(" "),e("h6",{attrs:{id:"算法-中文数字转阿拉伯数字-字符串处理问题-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法-中文数字转阿拉伯数字-字符串处理问题-2"}},[t._v("#")]),t._v(" 算法：中文数字转阿拉伯数字，字符串处理问题")]),t._v(" "),e("h6",{attrs:{id:"单例模式-手写双重检验单例模式-懒汉式-dcl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#单例模式-手写双重检验单例模式-懒汉式-dcl"}},[t._v("#")]),t._v(" 单例模式，手写双重检验单例模式 懒汉式，DCL")]),t._v(" "),e("h6",{attrs:{id:"介绍下二分查找-如果我想在链表中使用二分查找-怎么做比较好-跳表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍下二分查找-如果我想在链表中使用二分查找-怎么做比较好-跳表"}},[t._v("#")]),t._v(" 介绍下二分查找，如果我想在链表中使用二分查找，怎么做比较好？--\x3e跳表")]),t._v(" "),e("h6",{attrs:{id:"介绍下归并排序-时间复杂度多少"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#介绍下归并排序-时间复杂度多少"}},[t._v("#")]),t._v(" 介绍下归并排序，时间复杂度多少")]),t._v(" "),e("h6",{attrs:{id:"lru算法知道吗-怎么实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lru算法知道吗-怎么实现的"}},[t._v("#")]),t._v(" LRU算法知道吗，怎么实现的?")]),t._v(" "),e("h6",{attrs:{id:"b-树和红黑树-红黑树和一般的平衡二叉树-增、删、改、查的过程和效率、时间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#b-树和红黑树-红黑树和一般的平衡二叉树-增、删、改、查的过程和效率、时间复杂度"}},[t._v("#")]),t._v(" B+树和红黑树， 红黑树和一般的平衡二叉树，增、删、改、查的过程和效率、时间复杂度")]),t._v(" "),e("h6",{attrs:{id:"代码题-版本数字比较-比如-1-10-0-版本比-1-8-1-版本新-不允许使用split等函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码题-版本数字比较-比如-1-10-0-版本比-1-8-1-版本新-不允许使用split等函数"}},[t._v("#")]),t._v(' 代码题,版本数字比较，比如"1.10.0"版本比"1.8.1"版本新，不允许使用split等函数')]),t._v(" "),e("h6",{attrs:{id:"编程-最大栈"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编程-最大栈"}},[t._v("#")]),t._v(" 编程：最大栈")]),t._v(" "),e("h6",{attrs:{id:"递增数组-找出和为k的数对-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#递增数组-找出和为k的数对-2"}},[t._v("#")]),t._v(" 递增数组，找出和为k的数对")]),t._v(" "),e("h6",{attrs:{id:"二叉树各层节点数-递归、非递归-时间、空间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树各层节点数-递归、非递归-时间、空间复杂度"}},[t._v("#")]),t._v(" 二叉树各层节点数，递归、非递归，时间、空间复杂度")]),t._v(" "),e("h6",{attrs:{id:"输出给定数字下一个比它大的数字-比如输入-1234-输出-1243。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输出给定数字下一个比它大的数字-比如输入-1234-输出-1243。"}},[t._v("#")]),t._v(" 输出给定数字下一个比它大的数字，比如输入：1234， 输出 1243。")]),t._v(" "),e("h6",{attrs:{id:"算法-输入list-删除当中形如-1-的-返回原来的list-2-题目表述不完全-无法回答"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#算法-输入list-删除当中形如-1-的-返回原来的list-2-题目表述不完全-无法回答"}},[t._v("#")]),t._v(" 算法：输入List"),e("String",[t._v("，删除当中形如”1_”的，返回原来的List (2)题目表述不完全，无法回答")])],1),t._v(" "),e("h6",{attrs:{id:"一个无序数组-从小到大找到第一个缺的数-比如-8-2-4-3-6-9-7-11-12-第一个缺的就是5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一个无序数组-从小到大找到第一个缺的数-比如-8-2-4-3-6-9-7-11-12-第一个缺的就是5"}},[t._v("#")]),t._v(" 一个无序数组，从小到大找到第一个缺的数，比如[8 2 4 3 6 9 7 11 12],第一个缺的就是5")]),t._v(" "),e("h6",{attrs:{id:"二叉树右视图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二叉树右视图"}},[t._v("#")]),t._v(" 二叉树右视图")]),t._v(" "),e("h6",{attrs:{id:"有序有重复数组-给定target确定范围-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#有序有重复数组-给定target确定范围-2"}},[t._v("#")]),t._v(" 有序有重复数组，给定target确定范围")]),t._v(" "),e("h6",{attrs:{id:"_3sum"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3sum"}},[t._v("#")]),t._v(" 3sum")]),t._v(" "),e("h6",{attrs:{id:"三个线程循环打印abc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三个线程循环打印abc"}},[t._v("#")]),t._v(" 三个线程循环打印ABC")]),t._v(" "),e("h6",{attrs:{id:"top-k-堆的各种时间复杂度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#top-k-堆的各种时间复杂度"}},[t._v("#")]),t._v(" top k，堆的各种时间复杂度")]),t._v(" "),e("h6",{attrs:{id:"给出一个数组nums-一个值k-找出数组中的两个下标-i-j-使得-nums-i-nums-j-k-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#给出一个数组nums-一个值k-找出数组中的两个下标-i-j-使得-nums-i-nums-j-k-2"}},[t._v("#")]),t._v(" 给出一个数组nums，一个值k，找出数组中的两个下标 i，j 使得 nums[i] + nums[j] = k")]),t._v(" "),e("h1",{attrs:{id:"设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#设计"}},[t._v("#")]),t._v(" 设计")]),t._v(" "),e("h6",{attrs:{id:"让你设计一个微信发红包的api-你会怎么设计-不能有人领到的红包里面没钱-红包数值精确到分"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#让你设计一个微信发红包的api-你会怎么设计-不能有人领到的红包里面没钱-红包数值精确到分"}},[t._v("#")]),t._v(" 让你设计一个微信发红包的api，你会怎么设计，不能有人领到的红包里面没钱，红包数值精确到分")]),t._v(" "),e("h6",{attrs:{id:"场景题-2g内存-要求一个10g文件的中位数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#场景题-2g内存-要求一个10g文件的中位数"}},[t._v("#")]),t._v(" 场景题：2g内存，要求一个10g文件的中位数")]),t._v(" "),e("h6",{attrs:{id:"某一个大文件被拆成了n个小文件-每个小文件编号从0至n-1-相应大小分别记为s-i-。给定磁盘空间为c-试实现一个函数从n个文件中连续选出若干个文件拷贝到磁盘中-使得磁盘剩余空间最小。-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#某一个大文件被拆成了n个小文件-每个小文件编号从0至n-1-相应大小分别记为s-i-。给定磁盘空间为c-试实现一个函数从n个文件中连续选出若干个文件拷贝到磁盘中-使得磁盘剩余空间最小。-2"}},[t._v("#")]),t._v(" 某一个大文件被拆成了N个小文件，每个小文件编号从0至N-1，相应大小分别记为S(i)。给定磁盘空间为C，试实现一个函数从N个文件中连续选出若干个文件拷贝到磁盘中，使得磁盘剩余空间最小。")]),t._v(" "),e("h6",{attrs:{id:"场景题-redis设置高并发抢单一的东西-如何避免高并发对一个键进行访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#场景题-redis设置高并发抢单一的东西-如何避免高并发对一个键进行访问"}},[t._v("#")]),t._v(" 场景题：redis设置高并发抢单一的东西，如何避免高并发对一个键进行访问")]),t._v(" "),e("h6",{attrs:{id:"数据库连接池怎么设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据库连接池怎么设计"}},[t._v("#")]),t._v(" 数据库连接池怎么设计?")]),t._v(" "),e("h6",{attrs:{id:"场景题-分布式多个机器生成id-如何保证不重复"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#场景题-分布式多个机器生成id-如何保证不重复"}},[t._v("#")]),t._v(" 场景题，分布式多个机器生成id，如何保证不重复?")])])}),[],!1,null,null,null);e.default=s.exports}}]);