(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{465:function(s,a,t){"use strict";t.r(a);var r=t(2),e=Object(r.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"spring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring"}},[s._v("#")]),s._v(" Spring")]),s._v(" "),a("h3",{attrs:{id:"模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块"}},[s._v("#")]),s._v(" 模块")]),s._v(" "),a("h4",{attrs:{id:"spring-core"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-core"}},[s._v("#")]),s._v(" Spring Core")]),s._v(" "),a("p",[s._v("核心模块， Spring 其他所有的功能基本都需要依赖于该类库，主要提供 IoC 依赖注入功能的支持")]),s._v(" "),a("h4",{attrs:{id:"spring-aspects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-aspects"}},[s._v("#")]),s._v(" Spring Aspects")]),s._v(" "),a("p",[s._v("为与 AspectJ 的集成提供支持")]),s._v(" "),a("h4",{attrs:{id:"spring-aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop"}},[s._v("#")]),s._v(" Spring AOP")]),s._v(" "),a("p",[s._v("提供了面向切面的编程实现")]),s._v(" "),a("h4",{attrs:{id:"spring-data-access-integration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-data-access-integration"}},[s._v("#")]),s._v(" Spring Data Access/Integration")]),s._v(" "),a("h6",{attrs:{id:"spring-jdbc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-jdbc"}},[s._v("#")]),s._v(" spring-jdbc")]),s._v(" "),a("p",[s._v("提供了对数据库访问的抽象 JDBC")]),s._v(" "),a("h6",{attrs:{id:"spring-tx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-tx"}},[s._v("#")]),s._v(" spring-tx")]),s._v(" "),a("p",[s._v("提供对事务的支持")]),s._v(" "),a("h6",{attrs:{id:"spring-orm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-orm"}},[s._v("#")]),s._v(" spring-orm")]),s._v(" "),a("p",[s._v("提供对 Hibernate 等 ORM 框架的支持")]),s._v(" "),a("h6",{attrs:{id:"spring-oxm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-oxm"}},[s._v("#")]),s._v(" spring-oxm")]),s._v(" "),a("p",[s._v("提供对 Castor 等 OXM 框架的支持")]),s._v(" "),a("h6",{attrs:{id:"spring-jms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-jms"}},[s._v("#")]),s._v(" spring-jms")]),s._v(" "),a("p",[s._v("Java 消息服务")]),s._v(" "),a("h4",{attrs:{id:"spring-web"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-web"}},[s._v("#")]),s._v(" Spring Web")]),s._v(" "),a("h6",{attrs:{id:"spring-web-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-web-2"}},[s._v("#")]),s._v(" spring-web")]),s._v(" "),a("p",[s._v("对 Web 功能的实现提供一些最基础的支持")]),s._v(" "),a("h6",{attrs:{id:"spring-webmvc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-webmvc"}},[s._v("#")]),s._v(" spring-webmvc")]),s._v(" "),a("p",[s._v("提供对 Spring MVC 的实现")]),s._v(" "),a("h6",{attrs:{id:"spring-websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-websocket"}},[s._v("#")]),s._v(" spring-websocket")]),s._v(" "),a("p",[s._v("提供了对 WebSocket 的支持，WebSocket 可以让客户端和服务端进行双向通信")]),s._v(" "),a("h6",{attrs:{id:"spring-webflux"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-webflux"}},[s._v("#")]),s._v(" spring-webflux")]),s._v(" "),a("p",[s._v("提供对 WebFlux 的支持,新的响应式框架")]),s._v(" "),a("h4",{attrs:{id:"spring-test"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-test"}},[s._v("#")]),s._v(" Spring Test")]),s._v(" "),a("h3",{attrs:{id:"ioc-inverse-of-control-控制反转"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ioc-inverse-of-control-控制反转"}},[s._v("#")]),s._v(" IoC（Inverse of Control:控制反转）")]),s._v(" "),a("p",[s._v("将原本在程序中手动创建对象的控制权，交由 Spring 框架来管理")]),s._v(" "),a("p",[s._v("将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注入。")]),s._v(" "),a("h3",{attrs:{id:"aop-aspect-oriented-programming-面向切面编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aop-aspect-oriented-programming-面向切面编程"}},[s._v("#")]),s._v(" AOP(Aspect-Oriented Programming:面向切面编程)")]),s._v(" "),a("h4",{attrs:{id:"spring-aop-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop-2"}},[s._v("#")]),s._v(" Spring AOP")]),s._v(" "),a("p",[s._v("基于动态代理,运行时增强")]),s._v(" "),a("h6",{attrs:{id:"实现了某个接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现了某个接口"}},[s._v("#")]),s._v(" 实现了某个接口")]),s._v(" "),a("p",[s._v("使用 JDK Proxy，去创建代理对象")]),s._v(" "),a("h6",{attrs:{id:"没有实现接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#没有实现接口"}},[s._v("#")]),s._v(" 没有实现接口")]),s._v(" "),a("p",[s._v("使用 Cglib 生成一个被代理对象的子类来作为代理")]),s._v(" "),a("h4",{attrs:{id:"aspectj-aop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#aspectj-aop"}},[s._v("#")]),s._v(" AspectJ AOP")]),s._v(" "),a("p",[s._v("编译时增强")]),s._v(" "),a("h3",{attrs:{id:"spring-bean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean"}},[s._v("#")]),s._v(" Spring bean")]),s._v(" "),a("p",[s._v("bean 代指的就是那些被 IoC 容器所管理的对象")]),s._v(" "),a("h4",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[s._v("#")]),s._v(" 作用域")]),s._v(" "),a("h6",{attrs:{id:"singleton"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#singleton"}},[s._v("#")]),s._v(" singleton")]),s._v(" "),a("p",[s._v("唯一 bean 实例，Spring 中的 bean 默认都是单例的，对单例设计模式的应用")]),s._v(" "),a("h6",{attrs:{id:"prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[s._v("#")]),s._v(" prototype")]),s._v(" "),a("p",[s._v("每次请求都会创建一个新的 bean 实例")]),s._v(" "),a("h6",{attrs:{id:"request"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#request"}},[s._v("#")]),s._v(" request")]),s._v(" "),a("p",[s._v("每一次 HTTP 请求产生，仅在当前 HTTP request 内有效")]),s._v(" "),a("h6",{attrs:{id:"session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" session")]),s._v(" "),a("p",[s._v("每一次来自新 session 的 HTTP 请求都会产生，仅在当前 HTTP session 内有效")]),s._v(" "),a("h6",{attrs:{id:"global-session"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#global-session"}},[s._v("#")]),s._v(" global-session")]),s._v(" "),a("p",[s._v("全局 session 作用域，仅仅在基于 portlet 的 web 应用中才有意义，Spring5 已经没有了")]),s._v(" "),a("h3",{attrs:{id:"注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[s._v("#")]),s._v(" 注解")]),s._v(" "),a("h4",{attrs:{id:"component-和-bean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#component-和-bean"}},[s._v("#")]),s._v(" @Component 和 @Bean")]),s._v(" "),a("p",[s._v("@Component 注解作用于类，而@Bean注解作用于方法")]),s._v(" "),a("p",[s._v("@Component通常是通过类路径扫描来自动侦测以及自动装配到 Spring 容器中，@Bean告诉了 Spring 这是某个类的实例，当我需要用它的时候还给我")]),s._v(" "),a("p",[s._v("@Bean 注解比 @Component 注解的自定义性更强，当我们引用第三方库中的类需要装配到 Spring容器时只能通过 @Bean")]),s._v(" "),a("h2",{attrs:{id:"springmvc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc"}},[s._v("#")]),s._v(" SpringMVC")]),s._v(" "),a("h2",{attrs:{id:"mybatis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis"}},[s._v("#")]),s._v(" Mybatis")])])}),[],!1,null,null,null);a.default=e.exports}}]);