(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{461:function(a,t,s){"use strict";s.r(t);var e=s(2),r=Object(e.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"并发编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发编程"}},[a._v("#")]),a._v(" 并发编程")]),a._v(" "),t("h3",{attrs:{id:"juc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#juc"}},[a._v("#")]),a._v(" JUC")]),a._v(" "),t("p",[a._v("(java.util.concurrent)")]),a._v(" "),t("h4",{attrs:{id:"concurrenthashmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap"}},[a._v("#")]),a._v(" ConcurrentHashMap")]),a._v(" "),t("p",[a._v("（高效）")]),a._v(" "),t("h5",{attrs:{id:"_1-7分段锁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7分段锁"}},[a._v("#")]),a._v(" "),t("strong",[a._v("1.7分段锁")])]),a._v(" "),t("p",[a._v("jdk1.7采用分段的Segment 数组 + HashEntry 数组 + 链表，对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，Segment 实现了 ReentrantLock是一种可重入锁，Segment 的结构和 HashMap 类似，是一种数组和链表结构，一个 Segment 包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构的元素")]),a._v(" "),t("h5",{attrs:{id:"_1-8cas-synchronized"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8cas-synchronized"}},[a._v("#")]),a._v(" "),t("strong",[a._v("1.8CAS+synchronized")])]),a._v(" "),t("p",[a._v("jdk1.8采用数组+链表/红黑树，用 Node 数组 + 链表 / 红黑树的数据结构来实现，并发控制使用 synchronized 和 CAS 来操作，synchronized 只锁定当前链表或红黑二叉树的首节点")]),a._v(" "),t("h4",{attrs:{id:"copyonwritearraylist"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#copyonwritearraylist"}},[a._v("#")]),a._v(" CopyOnWriteArrayList")]),a._v(" "),t("h4",{attrs:{id:"hashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[a._v("#")]),a._v(" HashSet")]),a._v(" "),t("p",[a._v("（底层哈希表，基于HashMap）")]),a._v(" "),t("h4",{attrs:{id:"linkedhashset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashset"}},[a._v("#")]),a._v(" LinkedHashSet")]),a._v(" "),t("p",[a._v("(底层链表和哈希表，插入取出顺序满足FIFO)")]),a._v(" "),t("h4",{attrs:{id:"concurrentlinkedqueue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#concurrentlinkedqueue"}},[a._v("#")]),a._v(" ConcurrentLinkedQueue")]),a._v(" "),t("h4",{attrs:{id:"blockingqueue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#blockingqueue"}},[a._v("#")]),a._v(" BlockingQueue")]),a._v(" "),t("h5",{attrs:{id:"arrayblockingqueue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arrayblockingqueue"}},[a._v("#")]),a._v(" ArrayBlockingQueue")]),a._v(" "),t("h5",{attrs:{id:"linkedblockingqueue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linkedblockingqueue"}},[a._v("#")]),a._v(" LinkedBlockingQueue")]),a._v(" "),t("h5",{attrs:{id:"priorityblockingqueue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#priorityblockingqueue"}},[a._v("#")]),a._v(" PriorityBlockingQueue")]),a._v(" "),t("h4",{attrs:{id:"concurrentskiplistmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#concurrentskiplistmap"}},[a._v("#")]),a._v(" ConcurrentSkipListMap")]),a._v(" "),t("h3",{attrs:{id:"synchronized"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[a._v("#")]),a._v(" synchronized")]),a._v(" "),t("p",[a._v("解决的是多个线程之间访问资源的同步性，可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行，重量级锁，效率低下")]),a._v(" "),t("p",[a._v("监视器锁（monitor）是依赖于底层的操作系统的 Mutex Lock 来实现的，JDK1.6 对锁的实现引入了大量的优化，如自旋锁、适应性自旋锁、锁消除、锁粗化、偏向锁、轻量级锁等技术来减少锁操作的开销")]),a._v(" "),t("h5",{attrs:{id:"无锁状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无锁状态"}},[a._v("#")]),a._v(" 无锁状态")]),a._v(" "),t("p",[a._v("当一个线程访问同步块时升级成偏向锁，会在 Mark Word 里存储锁偏向的线程 ID")]),a._v(" "),t("h5",{attrs:{id:"偏向锁状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#偏向锁状态"}},[a._v("#")]),a._v(" 偏向锁状态")]),a._v(" "),t("p",[a._v("有锁竞争时升级为轻量级锁，偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令")]),a._v(" "),t("h5",{attrs:{id:"轻量级锁状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#轻量级锁状态"}},[a._v("#")]),a._v(" 轻量级锁状态")]),a._v(" "),t("p",[a._v("自旋十次失败升级为重量级锁，轻量级锁的获取及释放依赖多次 CAS 原子指令")]),a._v(" "),t("h5",{attrs:{id:"重量级锁状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重量级锁状态"}},[a._v("#")]),a._v(" 重量级锁状态")]),a._v(" "),t("p",[a._v("后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒")]),a._v(" "),t("p",[t("strong",[a._v("锁可以升级不可降级，这种策略是为了提高获得锁和释放锁的效率")])]),a._v(" "),t("h5",{attrs:{id:"修饰实例方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰实例方法"}},[a._v("#")]),a._v(" 修饰实例方法")]),a._v(" "),t("p",[a._v("当前对象实例加锁")]),a._v(" "),t("p",[a._v("并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 ACC_SYNCHRONIZED 标识，该标识指明了该方法是一个同步方法")]),a._v(" "),t("h5",{attrs:{id:"修饰静态方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰静态方法"}},[a._v("#")]),a._v(" 修饰静态方法")]),a._v(" "),t("p",[a._v("给当前类加锁")]),a._v(" "),t("h5",{attrs:{id:"修饰代码块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰代码块"}},[a._v("#")]),a._v(" 修饰代码块")]),a._v(" "),t("p",[a._v("synchronized(this|object) 表示进入同步代码库前要获得给定对象的锁。synchronized(类.class) 表示进入同步代码前要获得 当前 class 的锁")]),a._v(" "),t("p",[a._v("使用的是 monitorenter 和 monitorexit 指令，Monitor 是基于 C++实现的，由ObjectMonitor实现的，每个对象中都内置了一个 ObjectMonitor对象，wait/notify等方法也依赖于monitor对象，只有在同步的块或者方法中才能调用wait/notify等方法")]),a._v(" "),t("p",[t("strong",[a._v("构造方法本身就属于线程安全的，不能使用 synchronized 关键字修饰")])]),a._v(" "),t("h5",{attrs:{id:"原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),t("p",[a._v("JVM层面，本质都是对对象监视器 monitor 的获取")]),a._v(" "),t("p",[t("strong",[a._v("双重校验锁实现对象单例（线程安全）")])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("volatile")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),a._v(" uniqueInstance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("private")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    \n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v("  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getUniqueInstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n       "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//先判断对象是否已经实例过，没有实例化过才进入加锁代码")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("uniqueInstance "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//类对象加锁")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("uniqueInstance "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                    uniqueInstance "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Singleton")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n                "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" uniqueInstance"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br")])]),t("p",[t("strong",[a._v("和 ReentrantLock 的区别")])]),a._v(" "),t("p",[a._v("两者都是可重入锁,自己可以再次获取自己的内部锁，同一个线程每次获取锁，锁的计数器都自增 1")]),a._v(" "),t("p",[a._v("synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API,ReentrantLock 是 JDK 层面实现的，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成")]),a._v(" "),t("p",[t("strong",[a._v("ReentrantLock 比 synchronized 增加了一些高级功能")])]),a._v(" "),t("p",[a._v("等待可中断,lock.lockInterruptibly()，正在等待的线程可以选择放弃等待")]),a._v(" "),t("p",[a._v("可实现公平锁,synchronized只能是非公平锁，ReentrantLock默认情况是非公平的")]),a._v(" "),t("p",[t("strong",[a._v("可实现选择性通知")]),a._v("（锁可以绑定多个条件）,")]),a._v(" "),t("p",[a._v("synchronized关键字与wait()和notify()/notifyAll()方法相结合可以实现等待/通知机制，而synchronized关键字就相当于整个 Lock 对象中只有一个Condition实例，如果执行notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题")]),a._v(" "),t("p",[a._v("ReentrantLock类当然也可以实现，但是需要借助于Condition接口与newCondition()方法，而Condition实例的signalAll()方法 只会唤醒注册在该Condition实例中的所有等待线程。")]),a._v(" "),t("h3",{attrs:{id:"reentrantlock"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reentrantlock"}},[a._v("#")]),a._v(" ReentrantLock")]),a._v(" "),t("h3",{attrs:{id:"volatile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[a._v("#")]),a._v(" volatile")]),a._v(" "),t("h4",{attrs:{id:"jmm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmm"}},[a._v("#")]),a._v(" JMM")]),a._v(" "),t("p",[a._v("(Java 内存模型)")]),a._v(" "),t("h5",{attrs:{id:"主内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主内存"}},[a._v("#")]),a._v(" 主内存")]),a._v(" "),t("h5",{attrs:{id:"本地内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地内存"}},[a._v("#")]),a._v(" 本地内存")]),a._v(" "),t("p",[a._v("每个线程都有一个私有的本地内存来存储共享变量的副本，并且，每个线程只能访问自己的本地内存，无法访问其他线程的本地内存")]),a._v(" "),t("h4",{attrs:{id:"原理-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理-2"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),t("p",[a._v("对于用volatile修饰的变量，对其写操作时会额外执行一个Lock指令")]),a._v(" "),t("p",[a._v("1.将该处理器的工作内存写回到主内存")]),a._v(" "),t("p",[a._v("2.使其他处理器的工作内存失效")]),a._v(" "),t("h4",{attrs:{id:"作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作用"}},[a._v("#")]),a._v(" 作用")]),a._v(" "),t("p",[t("strong",[a._v("防止 JVM 的指令重排，保证变量的可见性")])]),a._v(" "),t("p",[a._v("在单线程环境下，编译器和处理器为了提高运行速度，会在不影响运行结果的前提下对指令进行重排序")]),a._v(" "),t("p",[t("strong",[a._v("synchronized 和 volatile 是互补非对立")])]),a._v(" "),t("p",[a._v("volatile 关键字是线程同步的轻量级实现，性能肯定比synchronized关键字要好，volatile 关键字只能用于变量，synchronized 关键字可以修饰方法以及代码块")]),a._v(" "),t("p",[a._v("volatile 关键字能保证数据的可见性，但不能保证数据的原子性，synchronized 关键字两者都能保证")]),a._v(" "),t("p",[a._v("volatile关键字主要用于解决变量在多个线程之间的可见性，而 synchronized 关键字解决的是多个线程之间访问资源的同步性")]),a._v(" "),t("h3",{attrs:{id:"三个重要特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三个重要特性"}},[a._v("#")]),a._v(" 三个重要特性")]),a._v(" "),t("h4",{attrs:{id:"原子性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原子性"}},[a._v("#")]),a._v(" 原子性")]),a._v(" "),t("p",[a._v("synchronized 可以保证代码片段的原子性")]),a._v(" "),t("h4",{attrs:{id:"可见性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可见性"}},[a._v("#")]),a._v(" 可见性")]),a._v(" "),t("p",[a._v("volatile 关键字可以保证共享变量的可见性")]),a._v(" "),t("h4",{attrs:{id:"有序性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有序性"}},[a._v("#")]),a._v(" 有序性")]),a._v(" "),t("p",[a._v("volatile 关键字可以禁止指令进行重排序优化")]),a._v(" "),t("h3",{attrs:{id:"threadlocal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadlocal"}},[a._v("#")]),a._v(" ThreadLocal")]),a._v(" "),t("h4",{attrs:{id:"原理-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理-3"}},[a._v("#")]),a._v(" 原理")]),a._v(" "),t("p",[a._v("最终的变量是放在了当前线程的 ThreadLocalMap 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值")]),a._v(" "),t("h4",{attrs:{id:"内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[a._v("#")]),a._v(" 内存泄漏")]),a._v(" "),t("p",[a._v("ThreadLocalMap 中使用的 key 为 ThreadLocal 的弱引用,而 value 是强引用，在调用 set()、get()、remove() 方法的时候，会清理掉 key 为 null 的记录，使用完 ThreadLocal方法后 最好手动调用remove()方法")]),a._v(" "),t("h3",{attrs:{id:"线程池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程池"}},[a._v("#")]),a._v(" 线程池")]),a._v(" "),t("h4",{attrs:{id:"为什么用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么用"}},[a._v("#")]),a._v(" 为什么用")]),a._v(" "),t("p",[a._v("降低资源消耗")]),a._v(" "),t("p",[a._v("提高响应速度")]),a._v(" "),t("p",[a._v("提高线程的可管理性")]),a._v(" "),t("p",[t("strong",[a._v("Runnable 和 Callable")])]),a._v(" "),t("p",[a._v("Runnable 接口 不会返回结果或抛出检查异常，Callable 接口 可以")]),a._v(" "),t("p",[a._v("工具类 Executors 可以实现将 Runnable 对象转换成 Callable 对象")]),a._v(" "),t("p",[t("strong",[a._v("execute()方法和 submit()方法")])]),a._v(" "),t("p",[a._v("execute()方法用于提交不需要返回值的任务，submit()方法用于提交需要返回值的任务，线程池会返回一个 Future 类型的对象")]),a._v(" "),t("h4",{attrs:{id:"创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[a._v("#")]),a._v(" 创建")]),a._v(" "),t("p",[a._v("（不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor ）")]),a._v(" "),t("h5",{attrs:{id:"threadpoolexecutor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor"}},[a._v("#")]),a._v(" ThreadPoolExecutor()")]),a._v(" "),t("h6",{attrs:{id:"corepoolsize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#corepoolsize"}},[a._v("#")]),a._v(" corePoolSize")]),a._v(" "),t("p",[a._v("核心线程数")]),a._v(" "),t("h6",{attrs:{id:"maximumpoolsize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#maximumpoolsize"}},[a._v("#")]),a._v(" maximumPoolSize")]),a._v(" "),t("p",[a._v("最大线程数")]),a._v(" "),t("h6",{attrs:{id:"workqueue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#workqueue"}},[a._v("#")]),a._v(" workQueue")]),a._v(" "),t("p",[a._v("当前运行的线程数量达到核心线程数，新任务就会被存放在队列中")]),a._v(" "),t("h6",{attrs:{id:"keepalivetime"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#keepalivetime"}},[a._v("#")]),a._v(" keepAliveTime")]),a._v(" "),t("p",[a._v("线程池中的线程数量大于 corePoolSize 的时候，核心线程外的线程等待时间超过了 keepAliveTime才会被回收销毁")]),a._v(" "),t("h6",{attrs:{id:"unit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unit"}},[a._v("#")]),a._v(" unit")]),a._v(" "),t("p",[a._v("keepAliveTime 参数的时间单位")]),a._v(" "),t("h6",{attrs:{id:"threadfactory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#threadfactory"}},[a._v("#")]),a._v(" threadFactory")]),a._v(" "),t("p",[a._v("executor 创建新线程的时候会用到")]),a._v(" "),t("h6",{attrs:{id:"handler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#handler"}},[a._v("#")]),a._v(" handler")]),a._v(" "),t("p",[a._v("饱和策略，当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时")]),a._v(" "),t("p",[a._v("ThreadPoolExecutor.")]),a._v(" "),t("p",[a._v("AbortPolicy（默认）,抛出 RejectedExecutionException来拒绝新任务的处理")]),a._v(" "),t("p",[a._v("CallerRunsPolicy,调用执行自己的线程运行任务")]),a._v(" "),t("p",[a._v("DiscardPolicy,不处理新任务，直接丢弃掉")]),a._v(" "),t("p",[a._v("DiscardOldestPolicy,丢弃最早的未处理的任务请求")]),a._v(" "),t("h5",{attrs:{id:"工具类-executors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#工具类-executors"}},[a._v("#")]),a._v(" 工具类 Executors")]),a._v(" "),t("h6",{attrs:{id:"fixedthreadpool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fixedthreadpool"}},[a._v("#")]),a._v(" FixedThreadPool")]),a._v(" "),t("p",[a._v("返回一个固定线程数量的线程池")]),a._v(" "),t("h6",{attrs:{id:"singlethreadexecutor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#singlethreadexecutor"}},[a._v("#")]),a._v(" SingleThreadExecutor")]),a._v(" "),t("p",[a._v("返回一个只有一个线程的线程池")]),a._v(" "),t("h6",{attrs:{id:"cachedthreadpool"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cachedthreadpool"}},[a._v("#")]),a._v(" CachedThreadPool")]),a._v(" "),t("p",[a._v("返回一个可根据实际情况调整线程数量的线程池")]),a._v(" "),t("h3",{attrs:{id:"atomic原子类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomic原子类"}},[a._v("#")]),a._v(" Atomic原子类")]),a._v(" "),t("h4",{attrs:{id:"基本类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[a._v("#")]),a._v(" 基本类型")]),a._v(" "),t("h5",{attrs:{id:"atomicinteger"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomicinteger"}},[a._v("#")]),a._v(" AtomicInteger")]),a._v(" "),t("p",[a._v("主要利用 CAS (compare and swap) + volatile 和 native 方法来保证原子操作")]),a._v(" "),t("h5",{attrs:{id:"atomiclong"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomiclong"}},[a._v("#")]),a._v(" AtomicLong")]),a._v(" "),t("h5",{attrs:{id:"atomicboolean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomicboolean"}},[a._v("#")]),a._v(" AtomicBoolean")]),a._v(" "),t("h4",{attrs:{id:"数组类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组类型"}},[a._v("#")]),a._v(" 数组类型")]),a._v(" "),t("h5",{attrs:{id:"atomicintegerarray"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomicintegerarray"}},[a._v("#")]),a._v(" AtomicIntegerArray")]),a._v(" "),t("h5",{attrs:{id:"atomiclongarray"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomiclongarray"}},[a._v("#")]),a._v(" AtomicLongArray")]),a._v(" "),t("h5",{attrs:{id:"atomicreferencearray"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomicreferencearray"}},[a._v("#")]),a._v(" AtomicReferenceArray")]),a._v(" "),t("h4",{attrs:{id:"引用类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[a._v("#")]),a._v(" 引用类型")]),a._v(" "),t("h5",{attrs:{id:"atomicreference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomicreference"}},[a._v("#")]),a._v(" AtomicReference")]),a._v(" "),t("h5",{attrs:{id:"atomicstampedreference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomicstampedreference"}},[a._v("#")]),a._v(" AtomicStampedReference")]),a._v(" "),t("p",[a._v("原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于解决原子的更新数据和数据的版本号，可以解决使用 CAS 进行原子更新时可能出现的 ABA 问题。")]),a._v(" "),t("h5",{attrs:{id:"atomicmarkablereference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#atomicmarkablereference"}},[a._v("#")]),a._v(" AtomicMarkableReference")]),a._v(" "),t("p",[a._v("原子更新带有标记位的引用类型")]),a._v(" "),t("h3",{attrs:{id:"aqs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aqs"}},[a._v("#")]),a._v(" AQS")]),a._v(" "),t("p",[a._v("（AbstractQueuedSynchronizer）")]),a._v(" "),t("p",[a._v("java.util.concurrent.locks,一个用来构建锁和同步器的框架")]),a._v(" "),t("h4",{attrs:{id:"semaphore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#semaphore"}},[a._v("#")]),a._v(" Semaphore")]),a._v(" "),t("p",[a._v("(信号量)")]),a._v(" "),t("p",[a._v("synchronized 和 ReentrantLock 都是一次只允许一个线程访问某个资源，Semaphore(信号量)可以指定多个线程同时访问某个资源")]),a._v(" "),t("h4",{attrs:{id:"countdownlatch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#countdownlatch"}},[a._v("#")]),a._v(" CountDownLatch")]),a._v(" "),t("p",[a._v("（倒计时器）")]),a._v(" "),t("p",[a._v("可以让某一个线程等待直到倒计时结束，再开始执行")]),a._v(" "),t("h4",{attrs:{id:"cyclicbarrier"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cyclicbarrier"}},[a._v("#")]),a._v(" CyclicBarrier")]),a._v(" "),t("p",[a._v("(循环栅栏)")]),a._v(" "),t("p",[a._v("让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，每个线程调用 await() 方法告诉 CyclicBarrier 我已经到达了屏障")])])}),[],!1,null,null,null);t.default=r.exports}}]);