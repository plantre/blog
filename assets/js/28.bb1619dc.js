(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{444:function(a,t,r){"use strict";r.r(t);var s=r(2),v=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"jvm内存结构-运行时数据区域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm内存结构-运行时数据区域"}},[a._v("#")]),a._v(" JVM内存结构（运行时数据区域）")]),a._v(" "),t("h3",{attrs:{id:"线程共享"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程共享"}},[a._v("#")]),a._v(" 线程共享")]),a._v(" "),t("h4",{attrs:{id:"方法区-jvm的规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法区-jvm的规范"}},[a._v("#")]),a._v(" 方法区（JVM的规范）")]),a._v(" "),t("h5",{attrs:{id:"jdk8-永久代-元空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk8-永久代-元空间"}},[a._v("#")]),a._v(" JDK8，永久代->元空间")]),a._v(" "),t("h5",{attrs:{id:"用来存放已被虚拟机加载的类相关信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用来存放已被虚拟机加载的类相关信息"}},[a._v("#")]),a._v(" 用来存放已被虚拟机加载的类相关信息")]),a._v(" "),t("h6",{attrs:{id:"类信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类信息"}},[a._v("#")]),a._v(" 类信息")]),a._v(" "),t("p",[a._v("类的版本,字段,方法,接口,父类")]),a._v(" "),t("h6",{attrs:{id:"常量池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常量池"}},[a._v("#")]),a._v(" 常量池")]),a._v(" "),t("p",[a._v("静态常量池(字面量,符号引用)")]),a._v(" "),t("p",[a._v("运行时常量池(直接引用)")]),a._v(" "),t("p",[a._v("直接指向目标的指针")]),a._v(" "),t("p",[a._v("相对偏移量")]),a._v(" "),t("p",[a._v("一个能间接定位到目标的句柄")]),a._v(" "),t("p",[t("strong",[a._v("-XX:MetaspaceSize=N //设置 Metaspace 的初始（和最小大小）")])]),a._v(" "),t("p",[t("strong",[a._v("-XX:MaxMetaspaceSize=N //设置 Metaspace 的最大大小")])]),a._v(" "),t("h4",{attrs:{id:"堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆"}},[a._v("#")]),a._v(" 堆")]),a._v(" "),t("p",[a._v("虚拟机所管理的内存中最大的一块，此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存")]),a._v(" "),t("h5",{attrs:{id:"新生代内存-young-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新生代内存-young-generation"}},[a._v("#")]),a._v(" 新生代内存(Young Generation)")]),a._v(" "),t("h6",{attrs:{id:"eden"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#eden"}},[a._v("#")]),a._v(" Eden")]),a._v(" "),t("p",[a._v("大部分情况，对象都会首先在 Eden 区域分配，进入 S0 或者 S1后初始年龄变为 1")]),a._v(" "),t("h6",{attrs:{id:"survivor0"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#survivor0"}},[a._v("#")]),a._v(" Survivor0")]),a._v(" "),t("h6",{attrs:{id:"survivor1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#survivor1"}},[a._v("#")]),a._v(" Survivor1")]),a._v(" "),t("h5",{attrs:{id:"老生代-old-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#老生代-old-generation"}},[a._v("#")]),a._v(" 老生代(Old Generation)")]),a._v(" "),t("p",[a._v("年龄增加到一定程度（默认为 15 岁），晋升到老年代中，可以通过参数 -XX:MaxTenuringThreshold设置")]),a._v(" "),t("h5",{attrs:{id:"永久代-permanent-generation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#永久代-permanent-generation"}},[a._v("#")]),a._v(" 永久代(Permanent Generation）")]),a._v(" "),t("p",[a._v("JDK 8 版本之后已被 Metaspace(元空间) 取代，元空间使用的是直接内存")]),a._v(" "),t("h5",{attrs:{id:"jdk7之后新加部分-之前在永久代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk7之后新加部分-之前在永久代"}},[a._v("#")]),a._v(" JDK7之后新加部分，之前在永久代")]),a._v(" "),t("p",[a._v("永久代的 GC 回收效率太低，只有在整堆收集 (Full GC)的时候才会被执行 GC")]),a._v(" "),t("h6",{attrs:{id:"静态变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态变量"}},[a._v("#")]),a._v(" 静态变量")]),a._v(" "),t("h6",{attrs:{id:"字符串常量池"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串常量池"}},[a._v("#")]),a._v(" 字符串常量池")]),a._v(" "),t("p",[t("em",[a._v("堆这里最容易出现的就是 OutOfMemoryError 错误")])]),a._v(" "),t("p",[a._v("GC Overhead Limit Exceeded")]),a._v(" "),t("p",[a._v("当 JVM 花太多时间执行垃圾回收并且只能回收很少的堆空间时")]),a._v(" "),t("p",[a._v("Java heap space")]),a._v(" "),t("p",[a._v("堆内存中的空间不足以存放新创建的对象，和配置的最大堆内存有关，-Xmx参数")]),a._v(" "),t("h4",{attrs:{id:"直接内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#直接内存"}},[a._v("#")]),a._v(" 直接内存")]),a._v(" "),t("p",[a._v("非运行时数据区的一部分")]),a._v(" "),t("h3",{attrs:{id:"线程私有"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#线程私有"}},[a._v("#")]),a._v(" 线程私有")]),a._v(" "),t("h4",{attrs:{id:"虚拟机栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈"}},[a._v("#")]),a._v(" 虚拟机栈")]),a._v(" "),t("p",[a._v("每个线程在创建的时候都会创建一个，用于管理 Java 函数的调用，StackOverFlowError和OutOfMemoryError")]),a._v(" "),t("h5",{attrs:{id:"栈帧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈帧"}},[a._v("#")]),a._v(" 栈帧")]),a._v(" "),t("p",[a._v("每次方法调用都会创建一个，return 语句和抛出异常导致方法返回")]),a._v(" "),t("p",[a._v("局部变量表")]),a._v(" "),t("p",[a._v("操作数栈")]),a._v(" "),t("p",[a._v("动态链接")]),a._v(" "),t("p",[a._v("方法返回值")]),a._v(" "),t("h5",{attrs:{id:"异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[a._v("#")]),a._v(" 异常")]),a._v(" "),t("p",[a._v("StackOverFlowError")]),a._v(" "),t("p",[a._v("内存大小不允许动态扩展，当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度")]),a._v(" "),t("p",[a._v("OutOfMemoryError")]),a._v(" "),t("p",[a._v("内存大小可以动态扩展，在动态扩展栈时无法申请到足够的内存空间")]),a._v(" "),t("h4",{attrs:{id:"本地方法栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地方法栈"}},[a._v("#")]),a._v(" 本地方法栈")]),a._v(" "),t("p",[a._v("用于管理本地方法的调用")]),a._v(" "),t("h4",{attrs:{id:"程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#程序计数器"}},[a._v("#")]),a._v(" 程序计数器")]),a._v(" "),t("p",[a._v("用于记录各个线程执行的字节码的地址")]),a._v(" "),t("p",[a._v("程序计数器是唯一一个不会出现 OutOfMemoryError 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡")]),a._v(" "),t("h2",{attrs:{id:"对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[a._v("#")]),a._v(" 对象")]),a._v(" "),t("h3",{attrs:{id:"对象创建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象创建"}},[a._v("#")]),a._v(" 对象创建")]),a._v(" "),t("h4",{attrs:{id:"类加载检查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类加载检查"}},[a._v("#")]),a._v(" 类加载检查")]),a._v(" "),t("p",[a._v("虚拟机遇到一条 new 指令时，首先将去检查这个指令的参数是否能在常量池中定位到这个类的符号引用")]),a._v(" "),t("h4",{attrs:{id:"分配内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分配内存"}},[a._v("#")]),a._v(" 分配内存")]),a._v(" "),t("h5",{attrs:{id:"指针碰撞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指针碰撞"}},[a._v("#")]),a._v(" 指针碰撞")]),a._v(" "),t("p",[a._v("适用场合：堆内存规整")]),a._v(" "),t("p",[a._v("原理：用过的内存全部整合到一边，没有用过的内存放在另一边，中间有一个分界值指针，向没用的地方移动指针")]),a._v(" "),t("p",[a._v("GC收集器:Serial,ParNew")]),a._v(" "),t("h5",{attrs:{id:"空闲列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空闲列表"}},[a._v("#")]),a._v(" 空闲列表")]),a._v(" "),t("p",[a._v("适用场合:堆内存不规整的情况下")]),a._v(" "),t("p",[a._v("原理：虚拟机会维护一个列表，该列表记录哪些块可用")]),a._v(" "),t("p",[a._v("GC收集器:CMS")]),a._v(" "),t("h5",{attrs:{id:"并发问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发问题"}},[a._v("#")]),a._v(" 并发问题")]),a._v(" "),t("h6",{attrs:{id:"cas-失败重试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cas-失败重试"}},[a._v("#")]),a._v(" CAS+失败重试")]),a._v(" "),t("p",[a._v("假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止")]),a._v(" "),t("h6",{attrs:{id:"tlab"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tlab"}},[a._v("#")]),a._v(" TLAB")]),a._v(" "),t("p",[a._v("首先在 TLAB 分配")]),a._v(" "),t("h4",{attrs:{id:"初始化零值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始化零值"}},[a._v("#")]),a._v(" 初始化零值")]),a._v(" "),t("p",[a._v("将分配到的内存空间都初始化为零值（不包括对象头）")]),a._v(" "),t("h4",{attrs:{id:"设置对象头"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置对象头"}},[a._v("#")]),a._v(" 设置对象头")]),a._v(" "),t("p",[a._v("这个对象是哪个类的实例、")]),a._v(" "),t("p",[a._v("如何才能找到类的元数据信息、")]),a._v(" "),t("p",[a._v("对象的哈希码、")]),a._v(" "),t("p",[a._v("对象的 GC 分代年龄等信息")]),a._v(" "),t("h4",{attrs:{id:"执行-init-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行-init-方法"}},[a._v("#")]),a._v(" 执行 init 方法")]),a._v(" "),t("p",[a._v("执行 new 指令之后会接着执行 "),t("init",[a._v(" 方法，把对象按照程序员的意愿进行初始化")])],1),a._v(" "),t("h3",{attrs:{id:"对象的内存布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的内存布局"}},[a._v("#")]),a._v(" 对象的内存布局")]),a._v(" "),t("h4",{attrs:{id:"对象头"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象头"}},[a._v("#")]),a._v(" 对象头")]),a._v(" "),t("h5",{attrs:{id:"类型指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类型指针"}},[a._v("#")]),a._v(" 类型指针")]),a._v(" "),t("p",[a._v("虚拟机通过这个指针来确定这个对象是哪个类的实例")]),a._v(" "),t("h5",{attrs:{id:"用于存储对象自身的运行时数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用于存储对象自身的运行时数据"}},[a._v("#")]),a._v(" 用于存储对象自身的运行时数据")]),a._v(" "),t("h6",{attrs:{id:"哈希码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#哈希码"}},[a._v("#")]),a._v(" 哈希码")]),a._v(" "),t("h6",{attrs:{id:"gc-分代年龄"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gc-分代年龄"}},[a._v("#")]),a._v(" GC 分代年龄")]),a._v(" "),t("h6",{attrs:{id:"锁状态标志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#锁状态标志"}},[a._v("#")]),a._v(" 锁状态标志")]),a._v(" "),t("h4",{attrs:{id:"实例数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实例数据"}},[a._v("#")]),a._v(" 实例数据")]),a._v(" "),t("p",[a._v("对象真正存储的有效信息")]),a._v(" "),t("h4",{attrs:{id:"对齐填充"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对齐填充"}},[a._v("#")]),a._v(" 对齐填充")]),a._v(" "),t("p",[a._v("对象的大小必须是 8 字节的整数倍")]),a._v(" "),t("h3",{attrs:{id:"对象的访问"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对象的访问"}},[a._v("#")]),a._v(" 对象的访问")]),a._v(" "),t("h4",{attrs:{id:"使用句柄"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用句柄"}},[a._v("#")]),a._v(" 使用句柄")]),a._v(" "),t("p",[a._v("Java 堆中将会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，句柄中包含了对象实例数据与类型数据各自的具体地址信息")]),a._v(" "),t("h4",{attrs:{id:"直接指针"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#直接指针"}},[a._v("#")]),a._v(" 直接指针")]),a._v(" "),t("p",[a._v("reference 中存储的直接就是对象的地址")]),a._v(" "),t("h2",{attrs:{id:"类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[a._v("#")]),a._v(" 类")]),a._v(" "),t("h3",{attrs:{id:"加载过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载过程"}},[a._v("#")]),a._v(" 加载过程")]),a._v(" "),t("p",[a._v("加载->连接(验证,准备,解析)->初始化->使用->卸载")]),a._v(" "),t("p",[a._v("JDK 7 及之后，把原本放在永久代的字符串常量池、静态变量等移动到堆中")]),a._v(" "),t("h3",{attrs:{id:"加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载器"}},[a._v("#")]),a._v(" 加载器")]),a._v(" "),t("h4",{attrs:{id:"bootstrapclassloader-启动类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bootstrapclassloader-启动类加载器"}},[a._v("#")]),a._v(" BootstrapClassLoader(启动类加载器)")]),a._v(" "),t("p",[a._v("由 C++实现，负责加载 %JAVA_HOME%/lib目录下的 jar 包和类或者被 -Xbootclasspath参数指定的路径中的所有类")]),a._v(" "),t("p",[a._v("JRE的lib目录下的核心类库")]),a._v(" "),t("h4",{attrs:{id:"extensionclassloader-扩展类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extensionclassloader-扩展类加载器"}},[a._v("#")]),a._v(" ExtensionClassLoader(扩展类加载器)")]),a._v(" "),t("p",[a._v("父类加载器为 null，null 并不代表没有，而是 BootstrapClassLoader")]),a._v(" "),t("p",[a._v("继承自java.lang.ClassLoader，加载 %JRE_HOME%/lib/ext 目录下的 jar 包和类，或被 java.ext.dirs 系统变量所指定的路径下的 jar 包")]),a._v(" "),t("p",[a._v("JRE的lib目录下的ext扩展目录中的jar包")]),a._v(" "),t("h4",{attrs:{id:"appclassloader-应用程序类加载器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#appclassloader-应用程序类加载器"}},[a._v("#")]),a._v(" AppClassLoader(应用程序类加载器)")]),a._v(" "),t("p",[a._v("继承自java.lang.ClassLoader，加载当前应用 classpath 下的所有 jar 包和类")]),a._v(" "),t("p",[a._v("加载你自己写的那些类")]),a._v(" "),t("h4",{attrs:{id:"userdefinedclassloader-用户自定义类加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#userdefinedclassloader-用户自定义类加载"}},[a._v("#")]),a._v(" UserDefinedClassLoader(用户自定义类加载)")]),a._v(" "),t("p",[a._v("继承自java.lang.ClassLoader，")]),a._v(" "),t("h3",{attrs:{id:"tomcat类加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat类加载"}},[a._v("#")]),a._v(" Tomcat类加载")]),a._v(" "),t("h4",{attrs:{id:"bootstrapclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bootstrapclassloader"}},[a._v("#")]),a._v(" BootstrapClassLoader")]),a._v(" "),t("h4",{attrs:{id:"extensionclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extensionclassloader"}},[a._v("#")]),a._v(" ExtensionClassLoader")]),a._v(" "),t("h4",{attrs:{id:"appclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#appclassloader"}},[a._v("#")]),a._v(" AppClassLoader")]),a._v(" "),t("h4",{attrs:{id:"commonclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commonclassloader"}},[a._v("#")]),a._v(" CommonClassLoader")]),a._v(" "),t("h5",{attrs:{id:"catalina-classloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#catalina-classloader"}},[a._v("#")]),a._v(" Catalina ClassLoader")]),a._v(" "),t("p",[a._v("⽤于加载服务器内部可⻅类，这些类应⽤程序不能访问")]),a._v(" "),t("h5",{attrs:{id:"sharedclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sharedclassloader"}},[a._v("#")]),a._v(" SharedClassLoader")]),a._v(" "),t("p",[a._v("⽤于加载应⽤程序共享类，这些类服务器不会依赖")]),a._v(" "),t("h6",{attrs:{id:"webappclassloader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webappclassloader"}},[a._v("#")]),a._v(" WebappClassLoader")]),a._v(" "),t("p",[a._v("每个应⽤程序都会有⼀个独⼀⽆⼆的Webapp ClassLoader，他⽤来加载本应⽤程序 /WEB-INF/classes 和 /WEB-INF/lib 下的类")]),a._v(" "),t("h3",{attrs:{id:"tomcat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tomcat"}},[a._v("#")]),a._v(" Tomcat")]),a._v(" "),t("h4",{attrs:{id:"热加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#热加载"}},[a._v("#")]),a._v(" 热加载")]),a._v(" "),t("p",[a._v("即在在运行时重新加载class")]),a._v(" "),t("p",[a._v("如果发现有文件发生变化，热加载开关开启")]),a._v(" "),t("p",[a._v("关闭Context容器")]),a._v(" "),t("p",[a._v("重启Context容器")]),a._v(" "),t("h4",{attrs:{id:"热部署"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#热部署"}},[a._v("#")]),a._v(" 热部署")]),a._v(" "),t("p",[a._v("在服务器运行时重新部署项目")]),a._v(" "),t("p",[a._v("检查Host管理下的所有web应用")]),a._v(" "),t("p",[a._v("如果原来的Web应用被删除，就将相应Context容器删除")]),a._v(" "),t("p",[a._v("如果有新War包放进来，就部署相应的War包")]),a._v(" "),t("h3",{attrs:{id:"双亲委派"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派"}},[a._v("#")]),a._v(" 双亲委派")]),a._v(" "),t("p",[a._v("保证了 Java 程序的稳定运行，可以避免类的重复加载，也保证了 Java 的核心 API 不被篡改")]),a._v(" "),t("h4",{attrs:{id:"打破双亲委派"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#打破双亲委派"}},[a._v("#")]),a._v(" 打破双亲委派")]),a._v(" "),t("p",[a._v("自定义加载器的话，需要继承 ClassLoader，重写 loadClass() 方法")]),a._v(" "),t("p",[a._v("不想打破，就重写 ClassLoader 类中的 findClass() 方法")]),a._v(" "),t("h2",{attrs:{id:"垃圾回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[a._v("#")]),a._v(" 垃圾回收")]),a._v(" "),t("h3",{attrs:{id:"垃圾收集算法-方法论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集算法-方法论"}},[a._v("#")]),a._v(" 垃圾收集算法（方法论）")]),a._v(" "),t("h4",{attrs:{id:"标记-清除算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记-清除算法"}},[a._v("#")]),a._v(" 标记-清除算法")]),a._v(" "),t("p",[a._v("标记出所有不需要回收的对象,统一回收掉所有没有被标记的对象，最基础的收集算法")]),a._v(" "),t("p",[a._v("1.效率问题2.空间问题（标记清除后会产生大量不连续的碎片）")]),a._v(" "),t("h4",{attrs:{id:"标记-复制算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记-复制算法"}},[a._v("#")]),a._v(" 标记-复制算法")]),a._v(" "),t("p",[a._v("当这一块的内存使用完后，就将还存活的对象复制到另一块去，然后再把使用的空间一次清理掉")]),a._v(" "),t("p",[a._v("每次的内存回收都是对内存区间的一半进行回收,解决效率问题")]),a._v(" "),t("h4",{attrs:{id:"标记-整理算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记-整理算法"}},[a._v("#")]),a._v(" 标记-整理算法")]),a._v(" "),t("p",[a._v("让所有存活的对象向一端移动，然后直接清理掉端边界以外的内存")]),a._v(" "),t("h4",{attrs:{id:"分代收集算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分代收集算法"}},[a._v("#")]),a._v(" 分代收集算法")]),a._v(" "),t("p",[a._v("在新生代中，每次收集都会有大量对象死去，所以可以选择”标记-复制“算法，只需要付出少量对象的复制成本就可以完成每次垃圾收集")]),a._v(" "),t("p",[a._v("老年代的对象存活几率是比较高的，而且没有额外的空间对它进行分配担保，，所以我们必须选择“标记-清除”或“标记-整理”算法进行垃圾收集")]),a._v(" "),t("h3",{attrs:{id:"垃圾收集器-具体实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器-具体实现"}},[a._v("#")]),a._v(" 垃圾收集器（具体实现）")]),a._v(" "),t("h4",{attrs:{id:"serial收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serial收集器"}},[a._v("#")]),a._v(" Serial收集器")]),a._v(" "),t("p",[a._v("最基本、历史最悠久，单线程，它在进行垃圾收集工作的时候必须暂停其他所有的工作线程（STW），简单而高效")]),a._v(" "),t("p",[a._v("新生代标记复制，老年代标记整理")]),a._v(" "),t("h4",{attrs:{id:"parnew-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parnew-收集器"}},[a._v("#")]),a._v(" ParNew 收集器")]),a._v(" "),t("p",[a._v("Serial 收集器的多线程版本，许多运行在 Server 模式下的虚拟机的首要选择，除了 Serial 收集器外，只有它能与 CMS 收集器配合工作")]),a._v(" "),t("h4",{attrs:{id:"parallel-scavenge-收集器-jdk1-8-默认收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge-收集器-jdk1-8-默认收集器"}},[a._v("#")]),a._v(" Parallel Scavenge 收集器（ JDK1.8 默认收集器）")]),a._v(" "),t("p",[a._v("Parallel Scavenge 收集器关注点是吞吐量（高效率的利用 CPU）")]),a._v(" "),t("p",[a._v("CMS 等垃圾收集器的关注点更多的是用户线程的停顿时间（提高用户体验）")]),a._v(" "),t("h4",{attrs:{id:"serial-old-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serial-old-收集器"}},[a._v("#")]),a._v(" Serial Old 收集器")]),a._v(" "),t("p",[a._v("Serial 收集器的老年代版本")]),a._v(" "),t("p",[a._v("在 JDK1.5 以及以前的版本中与 Parallel Scavenge 收集器搭配使用")]),a._v(" "),t("p",[a._v("作为 CMS 收集器的后备方案")]),a._v(" "),t("h4",{attrs:{id:"parallel-old-收集器-jdk1-8-默认收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old-收集器-jdk1-8-默认收集器"}},[a._v("#")]),a._v(" Parallel Old 收集器（ JDK1.8 默认收集器）")]),a._v(" "),t("p",[a._v("Parallel Scavenge 收集器的老年代版本")]),a._v(" "),t("p",[a._v("Parallel Old 收集器（ JDK1.8 默认收集器）")]),a._v(" "),t("h4",{attrs:{id:"cms-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cms-收集器"}},[a._v("#")]),a._v(" CMS 收集器")]),a._v(" "),t("p",[a._v("HotSpot 虚拟机第一款真正意义上的并发收集器，第一次实现了让垃圾收集线程与用户线程（基本上）同时工作")]),a._v(" "),t("p",[a._v("获取最短回收停顿时间为目标的收集器")]),a._v(" "),t("h5",{attrs:{id:"标记-清除算法-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记-清除算法-2"}},[a._v("#")]),a._v(" 标记-清除算法")]),a._v(" "),t("h6",{attrs:{id:"初始标记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#初始标记"}},[a._v("#")]),a._v(" 初始标记")]),a._v(" "),t("p",[a._v("会让系统停止工作，进入STW，不过过程很短")]),a._v(" "),t("h6",{attrs:{id:"并发标记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发标记"}},[a._v("#")]),a._v(" 并发标记")]),a._v(" "),t("p",[a._v("恢复系统正常运行，垃圾回收与系统是并行进行")]),a._v(" "),t("p",[a._v("最耗时的")]),a._v(" "),t("h6",{attrs:{id:"重新标记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重新标记"}},[a._v("#")]),a._v(" 重新标记")]),a._v(" "),t("p",[a._v("部分对象已经失去引用变成垃圾对象没有来得及更正，以及新创建的对象还未来得及标记")]),a._v(" "),t("p",[a._v("会暂停我们的系统线程，速度很快")]),a._v(" "),t("h6",{attrs:{id:"并发清除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发清除"}},[a._v("#")]),a._v(" 并发清除")]),a._v(" "),t("p",[a._v("不需要移动存活对象， 所以这个阶段也是可以与用户线程同时并发的")]),a._v(" "),t("h5",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[a._v("#")]),a._v(" 优点：")]),a._v(" "),t("p",[a._v("并发收集、低停顿")]),a._v(" "),t("h5",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[a._v("#")]),a._v(" 缺点：")]),a._v(" "),t("p",[a._v("对 CPU 资源敏感；无法处理浮动垃圾；会导致收集结束时会有大量空间碎片产生")]),a._v(" "),t("h4",{attrs:{id:"g1-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1-收集器"}},[a._v("#")]),a._v(" G1 收集器")]),a._v(" "),t("p",[a._v("面向服务器的垃圾收集器，面向服务器的垃圾收集器，以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征.")]),a._v(" "),t("p",[a._v("在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region")]),a._v(" "),t("h5",{attrs:{id:"并行与并发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并行与并发"}},[a._v("#")]),a._v(" 并行与并发")]),a._v(" "),t("p",[a._v("使用多个 CPU来缩短 Stop-The-World 停顿时间")]),a._v(" "),t("h5",{attrs:{id:"分代收集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分代收集"}},[a._v("#")]),a._v(" 分代收集")]),a._v(" "),t("p",[a._v("不需要其他收集器配合")]),a._v(" "),t("h5",{attrs:{id:"空间整合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空间整合"}},[a._v("#")]),a._v(" 空间整合")]),a._v(" "),t("p",[a._v("整体来看是基于“标记-整理”算法，局部上来看是基于“标记-复制”算法")]),a._v(" "),t("h5",{attrs:{id:"可预测的停顿"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可预测的停顿"}},[a._v("#")]),a._v(" 可预测的停顿")]),a._v(" "),t("p",[a._v("降低停顿时间是 G1 和 CMS 共同的关注点，G1 还能建立可预测的停顿时间模型")]),a._v(" "),t("h5",{attrs:{id:"zgc-收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zgc-收集器"}},[a._v("#")]),a._v(" ZGC 收集器")]),a._v(" "),t("p",[a._v("标记-复制算法,出现 Stop The World 的情况会更少")]),a._v(" "),t("h2",{attrs:{id:"jvm参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm参数"}},[a._v("#")]),a._v(" JVM参数")]),a._v(" "),t("h3",{attrs:{id:"类别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类别"}},[a._v("#")]),a._v(" 类别")]),a._v(" "),t("p",[a._v("标准参数（-）")]),a._v(" "),t("p",[a._v("非标准参数（-X）")]),a._v(" "),t("p",[a._v("非Stable参数（-XX）")]),a._v(" "),t("h3",{attrs:{id:"堆内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆内存"}},[a._v("#")]),a._v(" 堆内存")]),a._v(" "),t("p",[a._v("整个堆大小=年轻代 + 年老代+ 持久代,持久代一般固定大小为64m")]),a._v(" "),t("h4",{attrs:{id:"xx-maxtenuringthreshold"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xx-maxtenuringthreshold"}},[a._v("#")]),a._v(" -XX:MaxTenuringThreshold：")]),a._v(" "),t("p",[a._v("设置垃圾最大年龄")]),a._v(" "),t("h4",{attrs:{id:"xms-初始堆空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xms-初始堆空间"}},[a._v("#")]),a._v(" -Xms:初始堆空间")]),a._v(" "),t("h4",{attrs:{id:"xmx-设置最大堆空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xmx-设置最大堆空间"}},[a._v("#")]),a._v(" -Xmx:设置最大堆空间")]),a._v(" "),t("h4",{attrs:{id:"minor-gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#minor-gc"}},[a._v("#")]),a._v(" Minor GC")]),a._v(" "),t("h5",{attrs:{id:"xmn-设置新生代堆大小"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xmn-设置新生代堆大小"}},[a._v("#")]),a._v(" -Xmn:设置新生代堆大小")]),a._v(" "),t("h5",{attrs:{id:"xx-newsize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xx-newsize"}},[a._v("#")]),a._v(" -XX:NewSize")]),a._v(" "),t("p",[a._v("设置年轻代大小")]),a._v(" "),t("h5",{attrs:{id:"xx-maxnewsize"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xx-maxnewsize"}},[a._v("#")]),a._v(" -XX:MaxNewSize")]),a._v(" "),t("h5",{attrs:{id:"xx-newratio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xx-newratio"}},[a._v("#")]),a._v(" -XX:NewRatio：")]),a._v(" "),t("p",[a._v("老/新")]),a._v(" "),t("p",[a._v("设置新生代（包括Eden和两个Survivor区）与老年代的比值为")]),a._v(" "),t("h5",{attrs:{id:"xx-survivorratio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xx-survivorratio"}},[a._v("#")]),a._v(" -XX:SurvivorRatio：")]),a._v(" "),t("p",[a._v("3：1：1")]),a._v(" "),t("p",[a._v("年轻代中Eden区与两个Survivor区的比值")]),a._v(" "),t("h5",{attrs:{id:"young-generation-新生代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#young-generation-新生代"}},[a._v("#")]),a._v(" Young Generation(新生代)")]),a._v(" "),t("p",[a._v("Eden")]),a._v(" "),t("p",[a._v("From Survivor0")]),a._v(" "),t("p",[a._v("To Survivor1")]),a._v(" "),t("h4",{attrs:{id:"major-gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#major-gc"}},[a._v("#")]),a._v(" Major GC")]),a._v(" "),t("h5",{attrs:{id:"old-generation-老年代"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#old-generation-老年代"}},[a._v("#")]),a._v(" Old Generation(老年代)")]),a._v(" "),t("p",[a._v("Old Memory")]),a._v(" "),t("h3",{attrs:{id:"方法区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法区"}},[a._v("#")]),a._v(" 方法区")]),a._v(" "),t("h4",{attrs:{id:"_1-8之前"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8之前"}},[a._v("#")]),a._v(" 1.8之前")]),a._v(" "),t("p",[a._v("-XX:PermSize")]),a._v(" "),t("p",[a._v("-XX:MaxPermSize,设置持久代大小")]),a._v(" "),t("h4",{attrs:{id:"_1-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8"}},[a._v("#")]),a._v(" 1.8")]),a._v(" "),t("p",[a._v("-XX:MetaspaceSize=N")]),a._v(" "),t("p",[a._v("-XX:MaxMetaspaceSize=N")]),a._v(" "),t("h3",{attrs:{id:"垃圾收集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集"}},[a._v("#")]),a._v(" 垃圾收集")]),a._v(" "),t("h4",{attrs:{id:"xx-useserialgc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xx-useserialgc"}},[a._v("#")]),a._v(" -XX:+UseSerialGC")]),a._v(" "),t("p",[a._v("串行垃圾收集器")]),a._v(" "),t("p",[a._v("只适用于小数据量，JDK5.0以前都是使用串行收集器")]),a._v(" "),t("h4",{attrs:{id:"xx-useparallelgc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xx-useparallelgc"}},[a._v("#")]),a._v(" -XX:+UseParallelGC")]),a._v(" "),t("p",[a._v("并行垃圾收集器")]),a._v(" "),t("h4",{attrs:{id:"xx-useparnewgc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xx-useparnewgc"}},[a._v("#")]),a._v(" -XX:+UseParNewGC")]),a._v(" "),t("p",[a._v("CMS垃圾收集器")]),a._v(" "),t("h4",{attrs:{id:"xx-useg1gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xx-useg1gc"}},[a._v("#")]),a._v(" -XX:+UseG1GC")]),a._v(" "),t("p",[a._v("G1垃圾收集器")]),a._v(" "),t("h3",{attrs:{id:"xss128k"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xss128k"}},[a._v("#")]),a._v(" -Xss128k：")]),a._v(" "),t("p",[a._v("设置每个线程的栈大小为128k")]),a._v(" "),t("p",[a._v("JDK5.0以后每个线程堆栈大小为1M，以前每个线程堆栈大小为256K")]),a._v(" "),t("h3",{attrs:{id:"jvm调优指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jvm调优指令"}},[a._v("#")]),a._v(" JVM调优指令")]),a._v(" "),t("h4",{attrs:{id:"jps"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jps"}},[a._v("#")]),a._v(" jps")]),a._v(" "),t("p",[a._v("-l 输出jar包路径，类全名")]),a._v(" "),t("p",[a._v("-m 输出main参数")]),a._v(" "),t("p",[a._v("-v 输出JVM参数")]),a._v(" "),t("h4",{attrs:{id:"jinfo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jinfo"}},[a._v("#")]),a._v(" jinfo")]),a._v(" "),t("p",[a._v("查看JVM参数")]),a._v(" "),t("p",[a._v("-flags")]),a._v(" "),t("h4",{attrs:{id:"jstat"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jstat"}},[a._v("#")]),a._v(" jstat")]),a._v(" "),t("p",[a._v("查看JVM运行时的状态信息，包括内存状态、垃圾回收")]),a._v(" "),t("h4",{attrs:{id:"jstack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jstack"}},[a._v("#")]),a._v(" jstack")]),a._v(" "),t("p",[a._v("查看JVM线程快照，jstack命令可以定位线程出现长时间卡顿的原因,，例如死锁，死循环")]),a._v(" "),t("h4",{attrs:{id:"jmap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jmap"}},[a._v("#")]),a._v(" jmap")]),a._v(" "),t("p",[a._v("可以用来查看内存信息")]),a._v(" "),t("h2",{attrs:{id:"内存溢出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存溢出"}},[a._v("#")]),a._v(" 内存溢出")]),a._v(" "),t("h3",{attrs:{id:"java-lang-outofmemoryerror-java-heap-space"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-outofmemoryerror-java-heap-space"}},[a._v("#")]),a._v(" java.lang.outofmemoryerror: java heap space")]),a._v(" "),t("h4",{attrs:{id:"当堆内存不足-并且已经达到jvm设置的最大值-无法继续申请新的内存-存活的对象在堆内存中无法被回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当堆内存不足-并且已经达到jvm设置的最大值-无法继续申请新的内存-存活的对象在堆内存中无法被回收"}},[a._v("#")]),a._v(" 当堆内存不足，并且已经达到jvm设置的最大值，无法继续申请新的内存，存活的对象在堆内存中无法被回收")]),a._v(" "),t("p",[a._v("查看当前jvm的堆内存配置是否太小，可以考虑增加堆内存大小")]),a._v(" "),t("p",[a._v("-xms和-xmx最好设置相同的内存大小，可以防止因为jvm频繁进行内存的调整影响稳定性和使用")]),a._v(" "),t("h4",{attrs:{id:"当一次从数据库查询大量数据-堆内存没有足够的内存可以存放大量的数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当一次从数据库查询大量数据-堆内存没有足够的内存可以存放大量的数据"}},[a._v("#")]),a._v(" 当一次从数据库查询大量数据，堆内存没有足够的内存可以存放大量的数据")]),a._v(" "),t("p",[a._v("通过jvm参数：-xx:+heapdumponoutofmemoryerror可以让虚拟机在出现内存溢出的时候dump出当前的堆内存快照")]),a._v(" "),t("h4",{attrs:{id:"大量的强引用对象在堆内存中存活-gc无法回收这些对象-新创建的对象在新生代无法进行分配-full-gc仍然无法进行回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#大量的强引用对象在堆内存中存活-gc无法回收这些对象-新创建的对象在新生代无法进行分配-full-gc仍然无法进行回收"}},[a._v("#")]),a._v(" 大量的强引用对象在堆内存中存活，gc无法回收这些对象，新创建的对象在新生代无法进行分配，full gc仍然无法进行回收")]),a._v(" "),t("h3",{attrs:{id:"java-lang-outofmemoryerror-stackoverflow-error"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-lang-outofmemoryerror-stackoverflow-error"}},[a._v("#")]),a._v(" java.lang.outofmemoryerror:stackoverflow error")]),a._v(" "),t("h4",{attrs:{id:"stackoverflowerror"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stackoverflowerror"}},[a._v("#")]),a._v(" stackoverflowerror")]),a._v(" "),t("p",[a._v("线程请求的栈深度大于虚拟机允许的最大深度")]),a._v(" "),t("p",[a._v("检查代码是否出现深度递归的情况，或者递归的终止条件没有设置")]),a._v(" "),t("h4",{attrs:{id:"虚拟机在扩展栈时无法申请到足够的内存空间"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机在扩展栈时无法申请到足够的内存空间"}},[a._v("#")]),a._v(" 虚拟机在扩展栈时无法申请到足够的内存空间")]),a._v(" "),t("p",[a._v("如果是线程的栈内存空间过小，则通过-xss设置每个线程的栈内存空间")]),a._v(" "),t("p",[a._v("默认的-xss参数的大小应该是1m")]),a._v(" "),t("h3",{attrs:{id:"direct-buffer-memory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#direct-buffer-memory"}},[a._v("#")]),a._v(" direct buffer memory")]),a._v(" "),t("p",[a._v("directbytebuffer 的默认大小为 64 mb，超出限制抛错，使用nio则可能会出现该异常")]),a._v(" "),t("p",[a._v("directmemory的内存大小可以通过-xx:maxdirectmemorysize指定")]),a._v(" "),t("h3",{attrs:{id:"metaspace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#metaspace"}},[a._v("#")]),a._v(" metaspace")]),a._v(" "),t("p",[a._v("元空间中存储的是类信息、常量池、方法描述等信息，直接使用本地内存")]),a._v(" "),t("p",[a._v("可以通过jvm参数来设置分配的内存空间的大小-xx:maxmetaspacesize配置参数")]),a._v(" "),t("h2",{attrs:{id:"内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏"}},[a._v("#")]),a._v(" 内存泄漏")]),a._v(" "),t("h3",{attrs:{id:"静态集合类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态集合类"}},[a._v("#")]),a._v(" 静态集合类")]),a._v(" "),t("p",[a._v("长生命周期的对象持有短生命周期对象的引用")]),a._v(" "),t("h3",{attrs:{id:"各种连接-如数据库连接、网络连接和io连接等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#各种连接-如数据库连接、网络连接和io连接等"}},[a._v("#")]),a._v(" 各种连接，如数据库连接、网络连接和IO连接等")]),a._v(" "),t("h3",{attrs:{id:"变量不合理的作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量不合理的作用域"}},[a._v("#")]),a._v(" 变量不合理的作用域")]),a._v(" "),t("h3",{attrs:{id:"内部类持有外部类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内部类持有外部类"}},[a._v("#")]),a._v(" 内部类持有外部类")]),a._v(" "),t("h3",{attrs:{id:"改变哈希值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#改变哈希值"}},[a._v("#")]),a._v(" 改变哈希值")]),a._v(" "),t("h3",{attrs:{id:"栈先增长-在收缩-那么从栈中弹出的对象将不会被当作垃圾回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#栈先增长-在收缩-那么从栈中弹出的对象将不会被当作垃圾回收"}},[a._v("#")]),a._v(" 栈先增长，在收缩，那么从栈中弹出的对象将不会被当作垃圾回收")]),a._v(" "),t("h3",{attrs:{id:"缓存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存泄漏"}},[a._v("#")]),a._v(" 缓存泄漏")]),a._v(" "),t("p",[a._v("可以使用WeakHashMap代表缓存，此种Map的特点是，当除了自身有对key的引用外，此key没有其他引用那么此map会自动丢弃此值")]),a._v(" "),t("h3",{attrs:{id:"监听器和回调"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#监听器和回调"}},[a._v("#")]),a._v(" 监听器和回调")])])}),[],!1,null,null,null);t.default=v.exports}}]);